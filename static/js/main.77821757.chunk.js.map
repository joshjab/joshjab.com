{"version":3,"sources":["cropped_profile.jpg","back2.gif","logo.svg","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","styles","headerContainer","backgroundImage","HeaderImage","Header","Container","style","fluid","Row","Col","md","Image","src","Profile","roundedCircle","responsive","Navbar","bg","variant","Nav","className","Link","href","React","Component","Home","About","Projects","Blog","App","basename","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oGAAAA,EAAOC,QAAU,IAA0B,6C,mBCA3CD,EAAOC,QAAU,IAA0B,mC,4ECA3CD,EAAOC,QAAU,IAA0B,kC,wPCMrCC,EAAS,CACXC,gBAAiB,CACbC,gBAAgB,OAAD,O,OAASC,EAAT,OAqCRC,E,iLA/BP,OACI,6BACI,kBAACC,EAAA,EAAD,CAAWC,MAAON,EAAOC,gBAAiBM,OAAK,GAC3C,6BAAM,6BAAM,6BAAM,6BAElB,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,MACA,kBAACA,EAAA,EAAD,CAAKC,GAAI,GACL,kBAACC,EAAA,EAAD,CAAOC,IAAKC,IAASC,eAAa,EAACC,YAAU,IAC7C,6BAAM,6BAAM,6BAAM,6BAClB,kDACA,6BAAM,6BAAM,6BAAM,8BAEtB,kBAACN,EAAA,EAAD,OAIJ,kBAACO,EAAA,EAAD,CAAQC,GAAG,OAAOC,QAAQ,QACtB,kBAACC,EAAA,EAAD,CAAKC,UAAU,WACX,kBAACD,EAAA,EAAIE,KAAL,CAAUC,KAAK,KAAf,QACA,kBAACH,EAAA,EAAIE,KAAL,CAAUC,KAAK,UAAf,SACA,kBAACH,EAAA,EAAIE,KAAL,CAAUC,KAAK,aAAf,YACA,kBAACH,EAAA,EAAIE,KAAL,CAAUC,KAAK,SAAf,gB,GAxBPC,IAAMC,WCc3B,IAAMC,EAAO,SAAPA,IAAO,OAAMA,GACbC,EAAQ,SAARA,IAAQ,OAAMA,GACdC,EAAW,SAAXA,IAAW,OAAMA,GACjBC,EAAO,SAAPA,IAAO,OAAMA,GAEJC,EAtBf,WACE,OACE,6BACA,kBAAC,IAAD,CAAYC,SAAS,KAElB,kBAAC,EAAD,MACA,mCACD,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWR,IACjC,kBAAC,IAAD,CAAOO,KAAK,SAASC,UAAWP,IAChC,kBAAC,IAAD,CAAOM,KAAK,YAAYC,UAAWN,IACnC,kBAAC,IAAD,CAAOK,KAAK,QAAQC,UAAWL,OCPjBM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.77821757.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cropped_profile.3cfa5199.jpg\";","module.exports = __webpack_public_path__ + \"static/media/back2.0a98f8fb.gif\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport ReactDOM from 'react-dom'\r\nimport {Container, Row, Col, Image, Navbar, Nav} from 'react-bootstrap'\r\nimport Profile from \"../cropped_profile.jpg\"\r\nimport HeaderImage from \"../back2.gif\"\r\n\r\nconst styles = {\r\n    headerContainer: {\r\n        backgroundImage: `url(${HeaderImage})`\r\n    }\r\n};\r\n\r\nclass Header extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Container style={styles.headerContainer} fluid>\r\n                    <br /><br /><br /><br />\r\n                    \r\n                    <Row>\r\n                        <Col></Col>\r\n                        <Col md={3}>\r\n                            <Image src={Profile} roundedCircle responsive />\r\n                            <br /><br /><br /><br />\r\n                            <h1>Joshua Jablonowski</h1>\r\n                            <br /><br /><br /><br />\r\n                        </Col>\r\n                        <Col></Col>\r\n                    </Row>\r\n\r\n\r\n                    <Navbar bg=\"dark\" variant=\"dark\">\r\n                        <Nav className=\"mr-auto\">\r\n                            <Nav.Link href=\"/\">Home</Nav.Link>\r\n                            <Nav.Link href=\"/about\">About</Nav.Link>\r\n                            <Nav.Link href=\"/projects\">Projects</Nav.Link>\r\n                            <Nav.Link href=\"/blog\">Blog</Nav.Link>\r\n                        </Nav>\r\n                    </Navbar>\r\n                </Container>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header;","import React from 'react';\nimport { HashRouter, Route, Link} from \"react-router-dom\";\nimport { Navbar, Nav, Row, Col, Container } from 'react-bootstrap'\nimport { Grid } from 'react-bootstrap'\nimport logo from \"./logo.svg\";\nimport './App.css';\n\nimport Header from './components/Header'\n\nfunction App() {\n  return (\n    <div>\n    <HashRouter basename='/'>\n\n       <Header></Header>\n       <h1>WIP</h1>\n      <Route exact path=\"/\" component={Home} />\n      <Route path=\"/about\" component={About} />\n      <Route path=\"/projects\" component={Projects} />\n      <Route path=\"/blog\" component={Blog} />\n\n    </HashRouter>\n    </div>\n   );\n}\n\nconst Home = () => Home\nconst About = () => About\nconst Projects = () => Projects\nconst Blog = () => Blog\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}